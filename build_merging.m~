clc;
close all;
clear all;
cvx_clear;
cvx_solver Gurobi_2;    


% builds merging matrix of shape N x N x O
% where N - number of merged structures
% O - number of possible placemenets for
% merging(left,right,front,back,forward,backward) = 6


% get list of structures for which you want to build merge matrix
all_structures = dir('merged_structs');
% names of structures start from index 3

SEED=1;
N_ORIENTATIONS = 6;

shift_directions = ['x','x','y','y','z','z'];
shift_distances = [6,-6,6,-6,6,-6];

% merge_solutions = [];



% n_structs = size(all_structures,1)-2;

% counting total number of nodes to build merging matrix
nodes_total=0;

for i=3:size(all_structures,1)
    path1 = strcat('merged_structs/',all_structures(i).name);
    sol1 = load(path1);
    size1 = size(sol1.sol.C,1);
    nodes_total = nodes_total+size1;
end

C_total = zeros(nodes_total);
R_total = zeros(nodes_total);

points_total = zeros(3,nodes_total);

num_merges = 0;

last_result = 0;
n_sol = 0;
for k =1:size(shift_directions,2)
    shift_direction = shift_directions(k);
    shift_distance = shift_distances(k);

    
    shift_y=0;
    for i=3:size(all_structures,1)
        shift_x=0;
        for j=3:size(all_structures,1)
            path1 = strcat('merged_structs/',all_structures(i).name);
            path2 = strcat('merged_structs/',all_structures(j).name);
            
            merge_result = merge(SEED,path1,path2,shift_direction,shift_distance);
            
            C_total(shift_y+1:shift_y+size(merge_result.C,1),shift_x+1:shift_x+size(merge_result.C,1),k) = merge_result.C;
            R_total(shift_y+1:shift_y+size(merge_result.C,1),shift_x+1:shift_x+size(merge_result.C,1),k) = merge_result.R;
            

            shift_x = shift_x + size(merge_result.C,1);
            
            num_merges=num_merges+1;
            
            
            disp(strcat("Made merges:",string(num_merges)))
        end
        
        shift_y = shift_y + size(merge_result.C);
    
    end
end


%%
% Some tests to check if code is correct
% test 1:

% checking structures 1 and 2

path1 = strcat('merged_structs/',all_structures(3).name);
path2 = strcat('merged_structs/',all_structures(4).name);

sol1 = load(path1);
sol2 = load(path2);

sol1 = sol1.sol;
sol2 = sol2.sol;

shift=shift_directions(1);
shift_dist=shift_distances(1);

switch shift
    case 'x'
        sol2.points(1,:) = sol2.points(1,:) + shift_dist;
        disp("Shift in x");
    case 'y'
        sol2.points(2,:) = sol2.points(2,:) + + shift_dist;
        disp("Shift in y");
    case 'z'
        sol2.points(3,:) = sol2.points(3,:) + + shift_dist;
        disp("Shift in z");        
    otherwise
        disp("No shifting");
end

p_1 = sol1.points;
p_2 = sol2.points;

p_bar = horzcat(p_1,p_2);

C_bar = C_total(1:size(p_1,2)+size(p_2,2),1:size(p_1,2)+size(p_2,2));
R_bar = R_total(1:size(p_1,2)+size(p_2,2),1:size(p_1,2)+size(p_2,2));

check_sol.points=p_bar;
check_sol.R = R_bar;
check_sol.C = C_bar;

filename="rand_filename";
visualize_solution(check_sol,3,filename,"separate");

% shift_directions = ['x','x','y','y','z','z'];
% shift_distances = [6,-6,6,-6,6,-6];


% merge_sol.points = merge_result.points;
% merge_sol.R = merge_result.R;
% merge_sol.C = merge_result.C;
% visualize_solution(merge_sol,3,filename,"separate");









% last_result = 0;
% n_sol = 0;
% % merge all with all
% for i=3:size(all_structures,1)
%     for j=3:size(all_structures,1)
%         path1 = strcat('merged_structs/',all_structures(i).name);
%         path2 = strcat('merged_structs/',all_structures(j).name);
%         
%         for k=1:size(shift_directions)
%             
%             shift_direction = shift_directions(k);
%             shift_distance = shift_distances(k);
%             merge_result = merge(SEED,path1,path2,shift_direction,shift_distance);  
% 
% %             if n_sol ==0
% %                 C_total(1:size(merge_result.C,1),1:size(merge_result.C,1)) = merge_result.C;
% %                 R_total(1:size(merge_result.R,1),1:size(merge_result.R,1)) = merge_result.R;
% %                
% %             else
% %                 shift = n_sol * size(last_result.C,1);
% %                 
% %                 C_total(shift+1:shift+size(merge_result.C,1),shift+1:shift+size(merge_result.C,1)) = merge_result.C;
% %                 R_total(shift+1:shift+size(merge_result.C,1),shift+1:shift+size(merge_result.C,1)) = merge_result.R;                
% %             end
% 
%             
%             last_result = merge_result;
%             
%             disp(n_sol);
%             n_sol = n_sol+1;
%             
%         end
%         
% 
%         
%         
%     end
%         
% end